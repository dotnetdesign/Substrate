<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.ServiceModel;
using DotNetDesign.Common;
using DotNetDesign.Substrate;
using Common.Logging;

<#
	var namespaceName = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");    
	var absolutePath = Host.ResolvePath("EntityMetaData.xml"); 
	var entitiesXDocument = XDocument.Load(absolutePath);
   	var entities = from entity in entitiesXDocument.Descendants("Entity")
		let properties = entity.Descendants("Property")
		select new
					{
						Name = entity.Attribute("name").Value,
						IdType = entity.Attribute("idType").Value,
						IsOwnable = bool.Parse(entity.Attribute("isOwnable").Value),
						OwnerType = entity.Attribute("ownerType").Value,
						Properties = properties.Select(p => new 
							{ 
								Name = p.Attribute("name").Value, 
								Type = p.Attribute("type").Value, 
								Required =  bool.Parse(p.Attribute("required").Value),
								DisplayName = p.Attribute("displayName"),
								Attributes = p.Descendants("Attribute").Select(a => new 
									{
										IncludeOnEntityData =  bool.Parse(a.Attribute("includeOnEntityData").Value),
										Value = a.Value.Trim()
									})
							})
					};
					
#>
namespace <#=namespaceName#>
{
	internal static class Logger
    {
        static Logger()
        {
            Assembly = LogManager.GetLogger("<#=namespaceName#>");
        }

        internal static ILog Assembly;
    }

	#region Entity Data Interfaces
<# 

	// creating interfaces for entity data
	PushIndent("\t");
	foreach(var entity in entities)
	{
		var useDefaultIdType = entity.IdType == "Guid";
		if(entity.IsOwnable){
			if(useDefaultIdType){
				WriteLine("public partial interface I{0}Data : IOwnableEntityData<I{0}Data, I{0}, I{0}Repository, I{1}, I{1}Data, I{1}Repository>", entity.Name, entity.OwnerType);
			}
			else{
				WriteLine("public partial interface I{0}Data : IOwnableEntityData<I{0}Data, I{0}, {1}, I{0}Repository, I{2}, I{2}Data, I{2}Repository>", entity.Name, entity.IdType, entity.OwnerType);
			}
		} else {
			if(useDefaultIdType){
				WriteLine("public partial interface I{0}Data : IEntityData<I{0}Data, I{0}, I{0}Repository>", entity.Name, entity);
			}
			else{
				WriteLine("public partial interface I{0}Data : IEntityData<I{0}Data, I{0}, {1}, I{0}Repository>", entity.Name, entity.IdType);
			}
		}
		WriteLine("{");
		
		foreach(var property in entity.Properties)
		{
			PushIndent("\t");
			if(property.Required)
			{
				WriteLine("[Required]");
			}
			if(property.DisplayName != null)
			{
				WriteLine("[DisplayName(\"{0}\")]", (string.IsNullOrWhiteSpace(property.DisplayName.Value)) ? property.Name : property.DisplayName.Value );
			}
			foreach(var attribute in property.Attributes)
			{
				if(!string.IsNullOrWhiteSpace(attribute.Value))
				{
					WriteLine("[{0}]", attribute.Value);
				}
			}
			
			WriteLine("{0} {1} {{ get; set; }}", property.Type, property.Name);
			PopIndent();
		} // end foreach for properties

		WriteLine("}");
	}
	PopIndent();
#>
	#endregion Entity Data Interfaces

	#region Entity Interfaces
<# 

	// creating interfaces for entities
	PushIndent("\t");
	foreach(var entity in entities)
	{
		var useDefaultIdType = entity.IdType == "Guid";
		
		if(entity.IsOwnable){
			if(useDefaultIdType){
				WriteLine("public partial interface I{0} : IOwnableEntity<I{0}, I{0}Data, I{1}, I{0}Repository, I{1}Data, I{1}Repository>, I{0}Data {{}}", entity.Name, entity.OwnerType);
			}
			else{
				WriteLine("public partial interface I{0} : IOwnableEntity<I{0}, {1}, I{0}Data, I{2}, I{0}Repository, I{2}Data, IRepository>, I{0}Data {{}}", entity.Name, entity.IdType, entity.OwnerType);
			}
		} else {
			if(useDefaultIdType){
				WriteLine("public partial interface I{0} : IEntity<I{0}, I{0}Data, I{0}Repository>, I{0}Data {{}}", entity.Name);
			}
			else{
				WriteLine("public partial interface I{0} : IEntity<I{0}, {1}, I{0}Data, I{0}Repository>, I{0}Data {{}}", entity.Name, entity.IdType);
			}
		}
	}
	PopIndent();
#>
	#endregion Entity Interfaces

	#region Entity Repository Interfaces
<# 

	// creating interfaces for entity repositories
	PushIndent("\t");
	foreach(var entity in entities)
	{
		var useDefaultIdType = entity.IdType == "Guid";
		
		if(entity.IsOwnable){
			if(useDefaultIdType){
				WriteLine("public partial interface I{0}Repository : IOwnableEntityRepository<I{0}Repository, I{0}, I{0}Data, I{1}, I{1}Data, I{1}Repository> {{}}", entity.Name, entity.OwnerType);
			}
			else{
				WriteLine("public partial interface I{0}Repository : IOwnableEntityRepository<I{0}Repository, I{0}, {1}, I{0}Data, I{2}, I{2}Data, I{2}Repository> {{}}", entity.Name, entity.IdType, entity.OwnerType);
			}
		} else {
			if(useDefaultIdType){
				WriteLine("public partial interface I{0}Repository : IEntityRepository<I{0}Repository, I{0}, I{0}Data> {{}}", entity.Name);
			}
			else{
				WriteLine("public partial interface I{0}Repository : IEntityRepository<I{0}Repository, I{0}, {1}, I{0}Data> {{}}", entity.Name, entity.IdType);
			}
		}
	}
	PopIndent();
#>
	#endregion Entity Repository Interfaces

	#region Entity Repository Service Interfaces
<# 

	// creating interfaces for entity repository services
	PushIndent("\t");
	foreach(var entity in entities)
	{
		var useDefaultIdType = entity.IdType == "Guid";
		WriteLine("[ServiceContract]");
		if(entity.IsOwnable){
			if(useDefaultIdType){
				WriteLine("public partial interface I{0}RepositoryService : IOwnableEntityRepositoryService<I{0}Data, I{0}, I{0}Repository, {0}Data, I{1}, I{1}Data, I{1}Repository> {{}}", entity.Name, entity.OwnerType);
			}
			else{
				WriteLine("public partial interface I{0}RepositoryService : IOwnableEntityRepositoryService<I{0}Data, I{0}, I{0}Repository, {1}, {0}Data, I{2}, I{2}Data, I{2}Repository> {{}}", entity.Name, entity.IdType, entity.OwnerType);
			}
		} else {
			if(useDefaultIdType){
				WriteLine("public partial interface I{0}RepositoryService : IEntityRepositoryService<I{0}Data, I{0}, I{0}Repository, {0}Data> {{}}", entity.Name);
			}
			else{
				WriteLine("public partial interface I{0}RepositoryService : IEntityRepositoryService<I{0}Data, I{0}, I{0}Repository, {1}, {0}Data> {{}}", entity.Name, entity.IdType);
			}
		}
	}
	PopIndent();
#>
	#endregion Entity Repository Service Interfaces

	#region Entity Data Implementations
<# 

	// creating entity data implementations for entities
	PushIndent("\t");
	foreach(var entity in entities)
	{	
		var useDefaultIdType = entity.IdType == "Guid";
		
		WriteLine("[DataContract]");
		WriteLine("[Serializable]");
		if(entity.IsOwnable){
			if(useDefaultIdType){
				WriteLine("public partial class {0}Data : BaseOwnableEntityData<I{0}Data, I{0}, I{0}Repository, I{1}, I{1}Data, I{1}Repository>, I{0}Data", entity.Name, entity.OwnerType);
			}
			else{
				WriteLine("public partial class {0}Data : BaseOwnableEntityData<I{0}Data, I{0}, {1}, I{0}Repository, I{2}, I{2}Data, I{2}Repository>, I{0}Data", entity.Name, entity.IdType, entity.OwnerType);
			}
		} else {
			if(useDefaultIdType){
				WriteLine("public partial class {0}Data : BaseEntityData<I{0}Data, I{0}, I{0}Repository>, I{0}Data", entity.Name);
			}
			else{
				WriteLine("public partial class {0}Data : BaseEntityData<I{0}Data, I{0}, {1}, I{0}Repository>, I{0}Data", entity.Name, entity.IdType);
			}
		}
		WriteLine("{");
		
		PushIndent("\t");
		WriteLine("#region I{0}Data Properties", entity.Name);
		foreach(var property in entity.Properties)
		{
			WriteLine("[DataMember]");			
			foreach(var attribute in property.Attributes)
			{
				if(!string.IsNullOrWhiteSpace(attribute.Value) && attribute.IncludeOnEntityData)
				{
					WriteLine("[{0}]", attribute.Value);
				}
			}
			WriteLine("public virtual {0} {1} {{ get; set; }}", property.Type, property.Name);
		} // end foreach for properties
		WriteLine("#endregion I{0}Data Properties", entity.Name);
		PopIndent();

		WriteLine("}");
	}
	PopIndent();
#>
	#endregion Entity Data Implementations

	#region Entity Implementations
<# 
	
	// creating entity implementations for entities
	foreach(var entity in entities)
	{
		var useDefaultIdType = entity.IdType == "Guid";
		
		if(entity.IsOwnable){
			if(useDefaultIdType){
	#>
		public partial class <#=entity.Name#> : BaseOwnableEntity<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository, I<#=entity.OwnerType#>, I<#=entity.OwnerType#>Data, I<#=entity.OwnerType#>Repository>, I<#=entity.Name#>
		{
			public <#=entity.Name#>(
				Func<I<#=entity.Name#>Repository> entityRepositoryFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<IConcurrencyManager<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityConcurrencyManagerFactory,
				IEnumerable<IEntityValidator<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityValidators,
	            Func<IPermissionAuthorizationManager<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> permissionAuthorizationManagerFactory,
	            Func<I<#=entity.OwnerType#>Repository> ownerRepositoryFactory)
				: base(entityRepositoryFactory, entityDataFactory, entityConcurrencyManagerFactory, entityValidators, permissionAuthorizationManagerFactory, ownerRepositoryFactory)
			{
			}

			#region I<#=entity.Name#>Data Properties
	<#
			}
			else{
	#>
		public partial class <#=entity.Name#> : BaseOwnableEntity<I<#=entity.Name#>, <#=entity.IdType#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository, I<#=entity.OwnerType#>, I<#=entity.OwnerType#>Data, I<#=entity.OwnerType#>Repository>>, I<#=entity.Name#>
		{
			public <#=entity.Name#>(
				Func<I<#=entity.Name#>Repository> entityRepositoryFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<IConcurrencyManager<I<#=entity.Name#>, <#=entity.IdType#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityConcurrencyManagerFactory,
				IEnumerable<IEntityValidator<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.IdType#>, I<#=entity.Name#>Repository>> entityValidators,
	            Func<IPermissionAuthorizationManager<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.IdType#>, I<#=entity.Name#>Repository>> permissionAuthorizationManagerFactory,
	            Func<I<#=entity.OwnerType#>Repository> ownerRepositoryFactory)
				: base(entityRepositoryFactory, entityDataFactory, entityConcurrencyManagerFactory, entityValidators, permissionAuthorizationManagerFactory, ownerRepositoryFactory)
			{
			}

			#region I<#=entity.Name#>Data Properties
	<#
			}
		} else {

			if(useDefaultIdType){
	#>
		public partial class <#=entity.Name#> : BaseEntity<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>, I<#=entity.Name#>
		{
			public <#=entity.Name#>(
				Func<I<#=entity.Name#>Repository> entityRepositoryFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<IConcurrencyManager<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityConcurrencyManagerFactory,
				IEnumerable<IEntityValidator<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityValidators,
	            Func<IPermissionAuthorizationManager<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> permissionAuthorizationManagerFactory)
				: base(entityRepositoryFactory, entityDataFactory, entityConcurrencyManagerFactory, entityValidators, permissionAuthorizationManagerFactory)
			{
			}

			#region I<#=entity.Name#>Data Properties
	<#
			}
			else{
	#>
		public partial class <#=entity.Name#> : BaseEntity<I<#=entity.Name#>, <#=entity.IdType#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>, I<#=entity.Name#>
		{
			public <#=entity.Name#>(
				Func<I<#=entity.Name#>Repository> entityRepositoryFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<IConcurrencyManager<I<#=entity.Name#>, <#=entity.IdType#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityConcurrencyManagerFactory,
				IEnumerable<IEntityValidator<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.IdType#>, I<#=entity.Name#>Repository>> entityValidators,
	            Func<IPermissionAuthorizationManager<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.IdType#>, I<#=entity.Name#>Repository>> permissionAuthorizationManagerFactory)
				: base(entityRepositoryFactory, entityDataFactory, entityConcurrencyManagerFactory, entityValidators, permissionAuthorizationManagerFactory)
			{
			}

			#region I<#=entity.Name#>Data Properties
	<#
			}
		}
	foreach(var property in entity.Properties)
	{
#>
		public virtual <#=property.Type#> <#=property.Name#> 
		{
			get 
			{
				using(Logger.Assembly.Scope())
				{ 
					return EntityData.<#=property.Name#>; 
				}
			}
			set
			{
				using(Logger.Assembly.Scope())
				{ 
					if (EntityData.<#=property.Name#> == value) return;

					var originalValue = EntityData.<#=property.Name#>;
					OnPropertyChanging("<#=property.Name#>", originalValue, value);
					EntityData.<#=property.Name#> = value;
					OnPropertyChanged("<#=property.Name#>", originalValue, value);
				}
			}
		}
<#
	} // end foreach for properties
#>
		#endregion I<#=entity.Name#>Data Properties
	}
<#  
	}
#>
	#endregion Entity Implementations

	#region Entity Repository Implementations
<# 

	// creating entity repository implementations for entities
	foreach(var entity in entities)
	{
		var useDefaultIdType = entity.IdType == "Guid";
		if(entity.IsOwnable){
			if(useDefaultIdType){
	#>
		public partial class <#=entity.Name#>Repository : OwnableEntityRepository<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.Name#>Data, I<#=entity.Name#>Repository, I<#=entity.Name#>RepositoryService, I<#=entity.OwnerType#>, I<#=entity.OwnerType#>Data, I<#=entity.OwnerType#>Repository>, I<#=entity.Name#>Repository
		{
			public <#=entity.Name#>Repository(
				Func<I<#=entity.Name#>> entityFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<I<#=entity.Name#>RepositoryService> entityRepositoryServiceFactory,
				IEnumerable<IEntityObserver<I<#=entity.Name#>>> entityObservers,
				Func<IEntityCache<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityCacheFactory,
				Func<IScopeManager> scopeManagerFactory)
				: base(entityFactory, entityDataFactory, entityRepositoryServiceFactory, entityObservers, entityCacheFactory, scopeManagerFactory)
			{
			}
		}
	<#  
			}
			else{
	#>
		public partial class <#=entity.Name#>Repository : OwnableEntityRepository<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.IdType#>, <#=entity.Name#>Data, I<#=entity.Name#>Repository, I<#=entity.Name#>RepositoryService, I<#=entity.OwnerType#>, I<#=entity.OwnerType#>Data, I<#=entity.OwnerType#>Repository>, I<#=entity.Name#>Repository
		{
			public <#=entity.Name#>Repository(
				Func<I<#=entity.Name#>> entityFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<I<#=entity.Name#>RepositoryService> entityRepositoryServiceFactory,
				IEnumerable<IEntityObserver<I<#=entity.Name#>, <#=entity.IdType#>>> entityObservers,
				Func<IEntityCache<I<#=entity.Name#>, <#=entity.IdType#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityCacheFactory,
				Func<IScopeManager> scopeManagerFactory)
				: base(entityFactory, entityDataFactory, entityRepositoryServiceFactory, entityObservers, entityCacheFactory, scopeManagerFactory)
			{
			}
		}
	<#  
			}
		} else {
			if(useDefaultIdType){
	#>
		public partial class <#=entity.Name#>Repository : EntityRepository<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.Name#>Data, I<#=entity.Name#>Repository, I<#=entity.Name#>RepositoryService>, I<#=entity.Name#>Repository
		{
			public <#=entity.Name#>Repository(
				Func<I<#=entity.Name#>> entityFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<I<#=entity.Name#>RepositoryService> entityRepositoryServiceFactory,
				IEnumerable<IEntityObserver<I<#=entity.Name#>>> entityObservers,
				Func<IEntityCache<I<#=entity.Name#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityCacheFactory,
				Func<IScopeManager> scopeManagerFactory)
				: base(entityFactory, entityDataFactory, entityRepositoryServiceFactory, entityObservers, entityCacheFactory, scopeManagerFactory)
			{
			}
		}
	<#  
			}
			else{
	#>
		public partial class <#=entity.Name#>Repository : EntityRepository<I<#=entity.Name#>, I<#=entity.Name#>Data, <#=entity.IdType#>, <#=entity.Name#>Data, I<#=entity.Name#>Repository, I<#=entity.Name#>RepositoryService>, I<#=entity.Name#>Repository
		{
			public <#=entity.Name#>Repository(
				Func<I<#=entity.Name#>> entityFactory,
				Func<I<#=entity.Name#>Data> entityDataFactory,
				Func<I<#=entity.Name#>RepositoryService> entityRepositoryServiceFactory,
				IEnumerable<IEntityObserver<I<#=entity.Name#>, <#=entity.IdType#>>> entityObservers,
				Func<IEntityCache<I<#=entity.Name#>, <#=entity.IdType#>, I<#=entity.Name#>Data, I<#=entity.Name#>Repository>> entityCacheFactory,
				Func<IScopeManager> scopeManagerFactory)
				: base(entityFactory, entityDataFactory, entityRepositoryServiceFactory, entityObservers, entityCacheFactory, scopeManagerFactory)
			{
			}
		}
	<#  
			}
		}
	}
#>
	#endregion Entity Repository Implementations
}
